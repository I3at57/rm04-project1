ggplot() +
geom_point(aes(df[,"xi_sys1"]))
ggplot(data = df) +
geom_point(aes(y = ))
ggplot(data = df) +
geom_point(aes(y = xi_sys1))
ggplot(data = df) +
geom_point(aes(y = xi_sys1))
ggplot() +
geom_point(aes(df[,'xi_sys1']))
ggplot() +
geom_qq(aes(df[,'xi_sys1']))
ggplot(df) +
geom_qq(aes(sample = xi_sys1))
ggplot(df) +
geom_qq(aes(sample = 'xi_sys1'))
ggplot() +
geom_qq(aes(df['xi_sys1']))
ggplot() +
geom_qq(aes(df['xi_sys1']))
ggplot() +
geom_qq(aes(df['xi_sys1']))
ggplot() +
geom_qq(aes(df[,'xi_sys1']))
ggplot() +
geom_qq(sample = aes(df[,'xi_sys1']))
ggplot() +
geom_density(sample = aes(df[,'xi_sys1']))
ggplot() +
geom_density(aes(df[,'xi_sys1']))
ggplot() +
geom_density(aes(df[,'xi_sys1'])) +
labels(x = "durées inter-panne",
y = "fréquences",
title = "densité mesurée des durées inter-panne")
ggplot() +
geom_density(aes(df[,'xi_sys1'])) +
labs(x = "durées inter-panne",
y = "fréquences",
title = "densité mesurée des durées inter-panne")
summary(df[,"xi_sys1"])
? Laplace
?? laplace
"trans
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
library(ggplot2, warn.conflicts = FALSE) # Pour les graphiques
library(magrittr, warn.conflicts = FALSE) # Pour l'opérateur pipe : %>%
library(dplyr, warn.conflicts = FALSE) # Pour la manipulation de dataframe
library(goft)
install.packages("goft")
library(ggplot2, warn.conflicts = FALSE) # Pour les graphiques
library(magrittr, warn.conflicts = FALSE) # Pour l'opérateur pipe : %>%
library(dplyr, warn.conflicts = FALSE) # Pour la manipulation de dataframe
library(goft)
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
library(ggplot2, warn.conflicts = FALSE) # Pour les graphiques
library(magrittr, warn.conflicts = FALSE) # Pour l'opérateur pipe : %>%
library(dplyr, warn.conflicts = FALSE) # Pour la manipulation de dataframe
library(goft)
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
laplace.test(df[,"xi_sys1"], method = "transf", N = 10^5)
laplace_test(df[,"xi_sys1"], method = "transf", N = 10^5)
ggplot() +
geom_freqpoly(aes(df[,'xi_sys1'])) +
labs(x = "durées inter-panne",
y = "fréquences",
title = "densité mesurée des durées inter-panne")
ggplot(aes(y = df[,"xi_sys1"])) +
geom_freqpoly() +
labs(x = "durées inter-panne",
y = "fréquences",
title = "densité mesurée des durées inter-panne")
ggplot(aes(y = df[,"xi_sys1"])) +
geom_freqpoly() +
labs(x = "durées inter-panne",
y = "fréquences",
title = "densité mesurée des durées inter-panne")
plot(df[,"xi_sys1"])
?? bartlett.test
bartlett.test(df[,"xi_sys1"])
bartlett.test(df[,"xi_sys1"])
bartlett.test(list(df[,"xi_sys1"]))
bartlett.test(df[,"xi_sys1"])
??bartlett
??chiq
? chiqsquare
?? chiqsquare
chisq.test(df[,"xi_sys1"])
df[,"Ti_sys1"]/(1:200)
df[,"Ti_sys1"]/200
df[,"Ti_sys1"]
2 * n * (ln(Tn/n)-sum(Xi)/n)/(1+((n+1)/(6*n))) %>% return()
compute_bartlett_stat <- function(Tn, Xi, n) {
2 * n * (ln(Tn/n)-sum(Xi)/n)/(1+((n+1)/(6*n))) %>% return()
}
# on calcule la statistique de test
n = 200
compute_bartlett_stat(df[n,"Ti_sys1"], df[,"xi_sys1"], n)
compute_bartlett_stat <- function(Tn, Xi, n) {
2 * n * (log(Tn/n)-sum(Xi)/n)/(1+((n+1)/(6*n))) %>% return()
}
# on calcule la statistique de test
n = 200
compute_bartlett_stat(df[n,"Ti_sys1"], df[,"xi_sys1"], n)
??chisq
rchisq()
qchisq(n-1)
qchisq(p = 0.025, n-1)
qchisq(p = 0.975, n-1)
compute_bartlett_stat <- function(Tn, Xi, n) {
2 * n * (log(Tn/n)-sum(log(Xi))/n)/(1+((n+1)/(6*n))) %>% return()
}
# on calcule la statistique de test
n = 200
compute_bartlett_stat(df[n,"Ti_sys1"], df[,"xi_sys1"], n)
estim_param_sys1 = 1/mean(df[,"xi_sys1"])
estim_param_sys1
ggplot() +
geom_line(aes(seq(1,300,0.001),pexp(seq(1,300,0.001),estim_param_sys1)))
t = seq(1,300,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1)))
t = seq(1,300,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(df[,"xi_sys1"])
t = seq(1,300,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = (log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1),
y = df[,"xi_sys1"])
t = seq(1,100,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = (log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1),
y = df[,"xi_sys1"])
t = seq(1,100,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = -(log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1),
y = df[,"xi_sys1"])
t = seq(1,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = -(log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1),
y = df[,"xi_sys1"])
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = -(log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1),
y = df[,"xi_sys1"])
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = -(log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1),
y = df[,"xi_sys1"]) +
xlim(0,50) +
ylim(0,50)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = -(log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1),
y = df[,"xi_sys1"]) +
xlim(0,50)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = -1*(log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1),
y = df[,"xi_sys1"]) +
xlim(0,50)
log(df[,"xi_sys1"])
-1*(log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = -1*(log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1,
y = df[,"xi_sys1"])) +
xlim(0,50)
-1*(log(df[,"xi_sys1"])-log(estim_param_sys1))/estim_param_sys1
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = (log(estim_param_sys1)-log(df[,"xi_sys1"]))/estim_param_sys1,
y = df[,"xi_sys1"])) +
xlim(0,50)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = (log(estim_param_sys1)-log(df[,"xi_sys1"]))/estim_param_sys1,
y = df[,"xi_sys1"])) +
xlim(0,50) +
ylim(0,2)
(log(estim_param_sys1)-log(df[,"xi_sys1"]))/estim_param_sys1
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1)))
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = df[,"xi_sys1"],
y = (log(estim_param_sys1)-log(df[,"xi_sys1"]))/estim_param_sys1)) +
xlim(0,50) +
ylim(0,2)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = df[,"xi_sys1"],
y = (estim_param_sys1*exp(-estim_param_sys1*df[,"xi_sys1"])) +
xlim(0,50) +
ylim(0,2)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = df[,"xi_sys1"],
y = estim_param_sys1*exp(-1*estim_param_sys1*df[,"xi_sys1"]) +
xlim(0,50) +
ylim(0,2)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = df[,"xi_sys1"],
y = estim_param_sys1*exp(-1*estim_param_sys1*df[,"xi_sys1"]))) +
xlim(0,50) +
ylim(0,2)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = df[,"xi_sys1"],
y = estim_param_sys1*exp(-1*estim_param_sys1*df[,"xi_sys1"]))) +
xlim(0,50) +
ylim(0,0.5)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = df[,"xi_sys1"],
y = estim_param_sys1*exp(-1*estim_param_sys1*df[,"xi_sys1"]))) +
xlim(0,50) +
ylim(0,0.2)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = df[,"xi_sys1"],
y = estim_param_sys1*exp(-1*estim_param_sys1*df[,"xi_sys1"]))) +
xlim(0,40) +
ylim(0,0.2)
t = seq(0,50,0.001)
ggplot() +
geom_line(aes(t,dexp(t,estim_param_sys1))) +
geom_point(aes(
x = df[,"xi_sys1"],
y = estim_param_sys1*exp(-1*estim_param_sys1*df[,"xi_sys1"]))) +
xlim(0,40) +
ylim(0,0.17)
ggplot() +
geom_point(aes(df[,"xi_sys1"]))
ggplot() +
geom_point(aes(df[,"xi_sys1"]))
ggplot() +
geom_point(aes(x = 1:200, y = df[,"xi_sys1"]))
ggplot() +
geom_point(aes(x = 1:200, y = df[,"xi_sys1"])) +
labs(x = "N° de mesure",
y = "Durée inter-panne",
title = "Représentation de l'échantillon")
ggplot() +
geom_point(aes(x = 1:200, y = df[,"xi_sys2"])) +
labs(x = "N° de mesure",
y = "Durée inter-panne",
title = "Représentation de l'échantillon")
ggplot() +
geom_point(aes(x = 1:200, y = df[,"xi_sys2"])) +
labs(x = "N° de mesure",
y = "Durée inter-panne",
title = "Représentation de l'échantillon")
compute_laplace_stat <- function(T){
n = length(T)
U = sqrt((12)/((n-1)*T[n]^2))
U = U * (sum(T)-(n+1)*T[n]/2)
return(U)
}
compute_laplace_stat(df[,"Ti_sys2"])
compute_laplace_stat(c(df[,"Ti_sys2"]))
compute_laplace_stat(c(df[,"Ti_sys2"]))
c(df[,"Ti_sys2"])
clist(df[,"Ti_sys2"])
list(df[,"Ti_sys2"])
as.list(df[,"Ti_sys2"])
as.vector(df[,"Ti_sys2"])
as.list(df[,"Ti_sys2"])
as.vector(df[,"Ti_sys2"])
compute_laplace_stat(as.vector(df[,"Ti_sys2"]))
qnorm((1-0.05)/2, mean = 0, sd = 1)
qnorm(1-0.05/2, mean = 0, sd = 1)
tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
rename(nuage,c('x*','formula'))
? rename
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot(
data = nuage
) +
geom_point(aes = (x = ))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot(
data = nuage
) +
geom_point(aes = (x = x*, y = formula))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot(
data = nuage
) +
geom_point(aes = (x = 'x*', y = 'formula'))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot(
data = nuage
) +
geom_point(aes = (x = 'x*',y = 'formula'))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot(
data = nuage
) +
geom_point(aes(x = 'x*',y = 'formula'))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot() +
geom_point(aes(x = nuage$`x*`,y = nuage$formula))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot() +
geom_point(aes(x = nuage$`x*`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x*`,y = nuage$formula))+
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot() +
geom_point(aes(x = nuage$`x*`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x*`,y = nuage$formula))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot() +
geom_point(aes(x = nuage$`x*`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x*`,y = nuage$formula), method = lm)
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
ggplot() +
geom_point(aes(x = nuage$`x*`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x*`,y = nuage$formula),
method = lm,
se = FALSE)
lm(data = sort(df[,"xi_sys1"]))
? lm
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x*','formula')
reglin <- lm(nuage~x*+I(x*^2))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
reglin <- lm(nuage~x+I(x^2))
lm(nuage$x,nuage$formula)
lm(nuage$x,nuage$formula)
? lm
lm(nuage$x~nuage$formula)
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
method = lm,
se = FALSE,)
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
se = FALSE,)
? geom_smooth
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
se = FALSE,) +
stat_smooth()
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
se = FALSE,) +
stat_smooth(aes(x = nuage$`x`,y = nuage$formula))
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
se = FALSE,) +
stat_smooth(aes(x = nuage$`x`,y = nuage$formula),show.legend = TRUE)
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula), se = FALSE,) +
stat_smooth(aes(x = nuage$`x`,y = nuage$formula), orientation = "y")
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula), se = FALSE,) +
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula), se = FALSE,)
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
se = FALSE,
method = lm)
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),se = FALSE)
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula), se = FALSE)
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula), se = FALSE)
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
se = FALSE,
method = lm)
lm(nuage$x~nuage$formula)
reg_lin <- lm(nuage$x~nuage$formula)
summary(reg_lin)
lm(nuage$x~nuage$formula)
nuage = tibble(sort(df[,"xi_sys1"]),-log(1-(1:200)/(n+1)))
colnames(nuage) <- c('x','formula')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
se = FALSE,
method = lm) +
labs(x = "xi*, les valeurs de x mesurées triées dans l'ordre",
y = "-ln(1-i/(n+1))",
title = "Test par adéquation graphique")
estim_param_sys1 = 1/mean(df[,"xi_sys1"])
estim_param_sys1 = 1/mean(df[,"xi_sys1"])
estim_param_sys1
1/estim_param_sys1
reg_lin <- lm(nuage$formula~nuage$x)
summary(reg_lin)
nuage = tibble(-log(1-(1:200)/(n+1)),sort(df[,"xi_sys1"]))
colnames(nuage) <- c('formula','x')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
se = FALSE,
method = lm) +
labs(x = "xi*, les valeurs de x mesurées triées dans l'ordre",
y = "-ln(1-i/(n+1))",
title = "Test par adéquation graphique")
nuage = tibble(-log(1-(1:200)/(n+1)),sort(df[,"xi_sys1"]))
colnames(nuage) <- c('formula','x')
ggplot() +
geom_point(aes(x = nuage$`x`,y = nuage$formula)) +
geom_smooth(aes(x = nuage$`x`,y = nuage$formula),
se = FALSE,
method = lm) +
labs(y = "xi*, les valeurs de x mesurées triées dans l'ordre",
x = "-ln(1-i/(n+1))",
title = "Test par adéquation graphique")
reg_lin <- lm(nuage$formula~nuage$x)
summary(reg_lin)
1/0.165511
lm(nuage$x~nuage$formula)
-0.5807/5.9820
