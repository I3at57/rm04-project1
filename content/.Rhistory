return(Cf)
}
realisation_trajectoire_sys1(param = list(H = 102*365,
x = 3*365,
scale = 3*365,
shape = 2.5,
cmc = 1000,
cmp = 200),
info = TRUE)
# Fonction pour simuler une trajectoire
realisation_trajectoire_sys1 <- function(param, info = FALSE) {
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
sprintf("=== l'échéancier de maintenance préventive ===")
sprintf(echeancier)
sprintf("\n\n === Début de simulation === \n\n")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H) {
next_panne <- t + realisation_aleatoire_weibull(scale = param$scale,
shape = param$shape)
if (info) {
# debug
sprintf(paste("Temps courant",t))
sprintf(paste("Date de la prochaine panne : ",next_panne))
sprintf(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {sprintf("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {sprintf("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
sprintf(paste("Temps courant",t))
sprintff(paste("Coût actuel",Cf))
}
}
return(Cf)
}
realisation_trajectoire_sys1(param = list(H = 102*365,
x = 3*365,
scale = 3*365,
shape = 2.5,
cmc = 1000,
cmp = 200),
info = TRUE)
# Fonction pour simuler une trajectoire
realisation_trajectoire_sys1 <- function(param, info = FALSE) {
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
sprintf("=== l'échéancier de maintenance préventive ===")
sprintf(echeancier)
sprintf("\n\n === Début de simulation === \n\n")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H) {
next_panne <- t + realisation_aleatoire_weibull(scale = param$scale,
shape = param$shape)
if (info) {
# debug
sprintf(paste("Temps courant",t))
sprintf(paste("Date de la prochaine panne : ",next_panne))
sprintf(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {sprintf("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {sprintf("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
sprintf(paste("Temps courant",t))
sprintf(paste("Coût actuel",Cf))
}
}
return(Cf)
}
realisation_trajectoire_sys1(param = list(H = 102*365,
x = 3*365,
scale = 3*365,
shape = 2.5,
cmc = 1000,
cmp = 200),
info = TRUE)
# Fonction pour simuler une trajectoire
realisation_trajectoire_sys1 <- function(param, info = FALSE) {
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
sprintf("=== l'échéancier de maintenance préventive ===")
print(echeancier)
sprintf("\n\n === Début de simulation === \n\n")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H) {
next_panne <- t + realisation_aleatoire_weibull(scale = param$scale,
shape = param$shape)
if (info) {
# debug
sprintf(paste("Temps courant",t))
sprintf(paste("Date de la prochaine panne : ",next_panne))
sprintf(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {sprintf("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {sprintf("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
sprintf(paste("Temps courant",t))
sprintf(paste("Coût actuel",Cf))
}
}
return(Cf)
}
realisation_trajectoire_sys1(param = list(H = 102*365,
x = 3*365,
scale = 3*365,
shape = 2.5,
cmc = 1000,
cmp = 200),
info = TRUE)
# Fonction pour simuler une trajectoire
realisation_trajectoire_sys1 <- function(param, info = FALSE) {
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
sprintf("=== l'échéancier de maintenance préventive ===")
print(echeancier)
sprintf("\n\n === Début de simulation === \n\n")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H) {
next_panne <- t + realisation_aleatoire_weibull(scale = param$scale,
shape = param$shape)
if (info) {
# debug
print(paste("Temps courant",t))
print(paste("Date de la prochaine panne : ",next_panne))
print(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {print("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {print("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
print(paste("Temps courant",t))
print(paste("Coût actuel",Cf))
sprintf("\n\n")
}
}
return(Cf)
}
realisation_trajectoire_sys1(param = list(H = 102*365,
x = 3*365,
scale = 3*365,
shape = 2.5,
cmc = 1000,
cmp = 200),
info = TRUE)
# Fonction pour simuler une trajectoire
realisation_trajectoire_sys1 <- function(param, info = FALSE) {
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
sprintf("=== l'échéancier de maintenance préventive ===")
print(echeancier)
sprintf("\n\n === Début de simulation === \n\n")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H) {
next_panne <- t + realisation_aleatoire_weibull(scale = param$scale,
shape = param$shape)
if (info) {
# debug
print(paste("Temps courant",t))
print(paste("Date de la prochaine panne : ",next_panne))
print(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {print("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {print("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
print(paste("Temps courant",t))
print(paste("Coût actuel",Cf))
sprintf("\n\n\n")
}
}
return(Cf)
}
realisation_trajectoire_sys1(param = list(H = 102*365,
x = 3*365,
scale = 3*365,
shape = 2.5,
cmc = 1000,
cmp = 200),
info = TRUE)
# Fonction pour simuler une trajectoire
realisation_trajectoire_sys1 <- function(param, info = FALSE) {
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
sprintf("=== l'échéancier de maintenance préventive ===")
print(echeancier)
sprintf("\n\n === Début de simulation === \n\n")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H) {
next_panne <- t + realisation_aleatoire_weibull(scale = param$scale,
shape = param$shape)
if (info) {
# debug
print(paste("Temps courant",t))
print(paste("Date de la prochaine panne : ",next_panne))
print(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {print("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {print("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
print(paste("Temps courant",t))
print(paste("Coût actuel",Cf))
sprintf("\n\n\n ")
}
}
return(Cf)
}
realisation_trajectoire_sys1(param = list(H = 102*365,
x = 3*365,
scale = 3*365,
shape = 2.5,
cmc = 1000,
cmp = 200),
info = TRUE)
# Fonction pour simuler une trajectoire
realisation_trajectoire_sys1 <- function(param, info = FALSE) {
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
sprintf("=== l'échéancier de maintenance préventive ===")
print(echeancier)
sprintf("\n\n === Début de simulation === \n\n")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H) {
next_panne <- t + realisation_aleatoire_weibull(scale = param$scale,
shape = param$shape)
if (info) {
# debug
print(paste("Temps courant",t))
print(paste("Date de la prochaine panne : ",next_panne))
print(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {print("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {print("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
print(paste("Temps courant",t))
print(paste("Coût actuel",Cf))
sprintf("---")
}
}
return(Cf)
}
realisation_trajectoire_sys1(param = list(H = 102*365,
x = 3*365,
scale = 3*365,
shape = 2.5,
cmc = 1000,
cmp = 200),
info = TRUE)
# Fonction pour simuler une trajectoire
realisation_trajectoire_sys1 <- function(param, info = FALSE) {
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
print("=== l'échéancier de maintenance préventive ===")
print(echeancier)
print("=== Début de simulation ===")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H) {
next_panne <- t + realisation_aleatoire_weibull(scale = param$scale,
shape = param$shape)
if (info) {
# debug
print(paste("Temps courant",t))
print(paste("Date de la prochaine panne : ",next_panne))
print(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {print("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {print("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
print(paste("Temps courant",t))
print(paste("Coût actuel",Cf))
print("---")
}
}
return(Cf)
}
realisation_trajectoire_sys1(param = list(H = 102*365,
x = 3*365,
scale = 3*365,
shape = 2.5,
cmc = 1000,
cmp = 200),
info = TRUE)
parametres <- list(H = 102*365, # on observe sur 102 ans
x = 3*365, # on effectue une maintenance préventive tous les
#trois ans
scale = 3 * 365, # eta en jours
shape = 2.5, # sans unités
cmc = 1000, # euros
cmp = 200) # euros
realisation_trajectoire_sys1(parametres)
34 * 200
34 * 1200
